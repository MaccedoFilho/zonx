{
  "version": 3,
  "sources": ["../../gsap/Physics2DPlugin.js"],
  "sourcesContent": ["/*!\n * Physics2DPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _getUnit,\n    _getStyleSaver,\n    _reverting,\n    _DEG2RAD = Math.PI / 180,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _bonusValidated = 1,\n    //<name>Physics2DPlugin</name>\n_initCore = function _initCore(core) {\n  gsap = core || _getGSAP();\n\n  if (!_coreInitted) {\n    _getUnit = gsap.utils.getUnit;\n    _getStyleSaver = gsap.core.getStyleSaver;\n\n    _reverting = gsap.core.reverting || function () {};\n\n    _coreInitted = 1;\n  }\n};\n\nvar PhysicsProp = function PhysicsProp(target, p, velocity, acceleration, stepsPerTimeUnit) {\n  var cache = target._gsap,\n      curVal = cache.get(target, p);\n  this.p = p;\n  this.set = cache.set(target, p); //setter\n\n  this.s = this.val = parseFloat(curVal);\n  this.u = _getUnit(curVal) || 0;\n  this.vel = velocity || 0;\n  this.v = this.vel / stepsPerTimeUnit;\n\n  if (acceleration || acceleration === 0) {\n    this.acc = acceleration;\n    this.a = this.acc / (stepsPerTimeUnit * stepsPerTimeUnit);\n  } else {\n    this.acc = this.a = 0;\n  }\n};\n\nexport var Physics2DPlugin = {\n  version: \"3.13.0\",\n  name: \"physics2D\",\n  register: _initCore,\n  init: function init(target, value, tween) {\n    _coreInitted || _initCore();\n    var data = this,\n        angle = +value.angle || 0,\n        velocity = +value.velocity || 0,\n        acceleration = +value.acceleration || 0,\n        xProp = value.xProp || \"x\",\n        yProp = value.yProp || \"y\",\n        aAngle = value.accelerationAngle || value.accelerationAngle === 0 ? +value.accelerationAngle : angle;\n    data.styles = _getStyleSaver && _getStyleSaver(target, value.xProp && value.xProp !== \"x\" ? value.xProp + \",\" + value.yProp : \"transform\");\n    data.target = target;\n    data.tween = tween;\n    data.step = 0;\n    data.sps = 30; //steps per second\n\n    if (value.gravity) {\n      acceleration = +value.gravity;\n      aAngle = 90;\n    }\n\n    angle *= _DEG2RAD;\n    aAngle *= _DEG2RAD;\n    data.fr = 1 - (+value.friction || 0);\n\n    data._props.push(xProp, yProp);\n\n    data.xp = new PhysicsProp(target, xProp, Math.cos(angle) * velocity, Math.cos(aAngle) * acceleration, data.sps);\n    data.yp = new PhysicsProp(target, yProp, Math.sin(angle) * velocity, Math.sin(aAngle) * acceleration, data.sps);\n    data.skipX = data.skipY = 0;\n  },\n  render: function render(ratio, data) {\n    var xp = data.xp,\n        yp = data.yp,\n        tween = data.tween,\n        target = data.target,\n        step = data.step,\n        sps = data.sps,\n        fr = data.fr,\n        skipX = data.skipX,\n        skipY = data.skipY,\n        time = tween._from ? tween._dur - tween._time : tween._time,\n        x,\n        y,\n        tt,\n        steps,\n        remainder,\n        i;\n\n    if (tween._time || !_reverting()) {\n      if (fr === 1) {\n        tt = time * time * 0.5;\n        x = xp.s + xp.vel * time + xp.acc * tt;\n        y = yp.s + yp.vel * time + yp.acc * tt;\n      } else {\n        time *= sps;\n        steps = i = (time | 0) - step;\n        /*\n        Note: rounding errors build up if we walk the calculations backward which we used to do like this to maximize performance:\n        \ti = -i;\n        \twhile (i--) {\n        \t\txp.val -= xp.v;\n        \t\typ.val -= yp.v;\n        \t\txp.v /= fr;\n        \t\typ.v /= fr;\n        \t\txp.v -= xp.a;\n        \t\typ.v -= yp.a;\n        \t}\n        but now for the sake of accuracy (to ensure rewinding always goes back to EXACTLY the same spot), we force the calculations to go forward every time. So if the tween is going backward, we just start from the beginning and iterate. This is only necessary with friction.\n         */\n\n        if (i < 0) {\n          xp.v = xp.vel / sps;\n          yp.v = yp.vel / sps;\n          xp.val = xp.s;\n          yp.val = yp.s;\n          data.step = 0;\n          steps = i = time | 0;\n        }\n\n        remainder = time % 1 * fr;\n\n        while (i--) {\n          xp.v += xp.a;\n          yp.v += yp.a;\n          xp.v *= fr;\n          yp.v *= fr;\n          xp.val += xp.v;\n          yp.val += yp.v;\n        }\n\n        x = xp.val + xp.v * remainder;\n        y = yp.val + yp.v * remainder;\n        data.step += steps;\n      }\n\n      skipX || xp.set(target, xp.p, _round(x) + xp.u);\n      skipY || yp.set(target, yp.p, _round(y) + yp.u);\n    } else {\n      data.styles.revert();\n    }\n  },\n  kill: function kill(property) {\n    if (this.xp.p === property) {\n      this.skipX = 1;\n    }\n\n    if (this.yp.p === property) {\n      this.skipY = 1;\n    }\n  }\n};\n_getGSAP() && gsap.registerPlugin(Physics2DPlugin);\nexport { Physics2DPlugin as default };"],
  "mappings": "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",
  "names": ["_getGSAP", "_round", "_initCore", "PhysicsProp"]
}
