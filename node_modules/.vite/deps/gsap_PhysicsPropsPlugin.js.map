{
  "version": 3,
  "sources": ["../../gsap/PhysicsPropsPlugin.js"],
  "sourcesContent": ["/*!\n * PhysicsPropsPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _getUnit,\n    _getStyleSaver,\n    _reverting,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _bonusValidated = 1,\n    //<name>PhysicsPropsPlugin</name>\n_initCore = function _initCore(core) {\n  gsap = core || _getGSAP();\n\n  if (!_coreInitted) {\n    _getUnit = gsap.utils.getUnit;\n    _getStyleSaver = gsap.core.getStyleSaver;\n\n    _reverting = gsap.core.reverting || function () {};\n\n    _coreInitted = 1;\n  }\n};\n\nvar PhysicsProp = function PhysicsProp(target, p, velocity, acceleration, friction, stepsPerTimeUnit) {\n  var cache = target._gsap,\n      curVal = cache.get(target, p);\n  this.p = p;\n  this.set = cache.set(target, p); //setter\n\n  this.s = this.val = parseFloat(curVal);\n  this.u = _getUnit(curVal) || 0;\n  this.vel = velocity || 0;\n  this.v = this.vel / stepsPerTimeUnit;\n\n  if (acceleration || acceleration === 0) {\n    this.acc = acceleration;\n    this.a = this.acc / (stepsPerTimeUnit * stepsPerTimeUnit);\n  } else {\n    this.acc = this.a = 0;\n  }\n\n  this.fr = 1 - (friction || 0);\n};\n\nexport var PhysicsPropsPlugin = {\n  version: \"3.13.0\",\n  name: \"physicsProps\",\n  register: _initCore,\n  init: function init(target, value, tween) {\n    _coreInitted || _initCore();\n    var data = this,\n        p;\n    data.styles = _getStyleSaver && _getStyleSaver(target);\n    data.target = target;\n    data.tween = tween;\n    data.step = 0;\n    data.sps = 30; //steps per second\n\n    data.vProps = [];\n\n    for (p in value) {\n      var _value$p = value[p],\n          velocity = _value$p.velocity,\n          acceleration = _value$p.acceleration,\n          friction = _value$p.friction;\n\n      if (velocity || acceleration) {\n        data.vProps.push(new PhysicsProp(target, p, velocity, acceleration, friction, data.sps));\n\n        data._props.push(p);\n\n        _getStyleSaver && data.styles.save(p);\n        friction && (data.hasFr = 1);\n      }\n    }\n  },\n  render: function render(ratio, data) {\n    var vProps = data.vProps,\n        tween = data.tween,\n        target = data.target,\n        step = data.step,\n        hasFr = data.hasFr,\n        sps = data.sps,\n        i = vProps.length,\n        time = tween._from ? tween._dur - tween._time : tween._time,\n        curProp,\n        steps,\n        remainder,\n        j,\n        tt;\n\n    if (tween._time || !_reverting()) {\n      if (hasFr) {\n        time *= sps;\n        steps = (time | 0) - step;\n        /*\n        Note: rounding errors build up if we walk the calculations backward which we used to do like this to maximize performance:\n        while (i--) {\n        \tcurProp = vProps[i];\n        \tj = -steps;\n        \twhile (j--) {\n        \t\tcurProp.val -= curProp.v;\n        \t\tcurProp.v /= curProp.fr;\n        \t\tcurProp.v -= curProp.a;\n        \t}\n        \tcurProp.set(target, curProp.p, _round(curProp.val + (curProp.v * remainder * curProp.fr)) + curProp.u);\n        }\n        but now for the sake of accuracy (to ensure rewinding always goes back to EXACTLY the same spot), we force the calculations to go forward every time. So if the tween is going backward, we just start from the beginning and iterate. This is only necessary with friction.\n         */\n\n        if (steps < 0) {\n          while (i--) {\n            curProp = vProps[i];\n            curProp.v = curProp.vel / sps;\n            curProp.val = curProp.s;\n          }\n\n          i = vProps.length;\n          data.step = step = 0;\n          steps = time | 0;\n        }\n\n        remainder = time % 1;\n\n        while (i--) {\n          curProp = vProps[i];\n          j = steps;\n\n          while (j--) {\n            curProp.v += curProp.a;\n            curProp.v *= curProp.fr;\n            curProp.val += curProp.v;\n          }\n\n          curProp.set(target, curProp.p, _round(curProp.val + curProp.v * remainder * curProp.fr) + curProp.u);\n        }\n\n        data.step += steps;\n      } else {\n        tt = time * time * 0.5;\n\n        while (i--) {\n          curProp = vProps[i];\n          curProp.set(target, curProp.p, _round(curProp.s + curProp.vel * time + curProp.acc * tt) + curProp.u);\n        }\n      }\n    } else {\n      data.styles.revert();\n    }\n  },\n  kill: function kill(property) {\n    var vProps = this.vProps,\n        i = vProps.length;\n\n    while (i--) {\n      vProps[i].p === property && vProps.splice(i, 1);\n    }\n  }\n};\n_getGSAP() && gsap.registerPlugin(PhysicsPropsPlugin);\nexport { PhysicsPropsPlugin as default };"],
  "mappings": "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",
  "names": ["_getGSAP", "_round", "_initCore", "PhysicsProp"]
}
